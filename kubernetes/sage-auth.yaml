
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sage-auth
  annotations:
    #traefik.ingress.kubernetes.io/router.tls: ""
spec:
  # rules:
  # - host: localhost
  #   http:
  #     paths:
  #     - path: /static
  #       pathType: Prefix
  #       backend:
  #         service:
  #           name: sage-auth-static
  #           port:
  #             number: 80
  #     - path: /
  #       pathType: Prefix
  #       backend:
  #         service:
  #           name: sage-auth
  #           port:
  #             number: 80

---
apiVersion: v1
kind: Service
metadata:
  name: sage-auth
spec:
  ports:
  - name: web
    port: 80
    targetPort: 8000
  selector:
    k8s-app: sage-auth
---
apiVersion: v1
kind: Service
metadata:
  name: sage-auth-static
spec:
  ports:
  - name: web
    port: 80
    targetPort: 80
  selector:
    k8s-app: sage-auth
---
apiVersion: v1
kind: Secret
metadata:
  name: sage-auth
type: Opaque
stringData:
    Globus_Auth_Client_ID: ""
    Globus_Auth_Client_Secret: ""
    MYSQL_PASSWORD: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sage-auth-config
data:
  MYSQL_HOST: mysql
  MYSQL_USER: sage-auth
  MYSQL_DATABASE: SAGEDB  # warning: this is still hard-coded
  SAGE_COOKIE_DOMAIN: ".sagecontinuum.org"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sage-auth
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: sage-auth
  template:
    metadata:
      labels:
        k8s-app: sage-auth
    spec:
      initContainers:
      - name: check-mysql-ready
        image: busybox:latest
        command: ['sh', '-c',
          'until nc -zv ${MYSQL_HOST} 3306; do echo "Waiting for mysql service"; sleep 2; done;']
        env:
          - name: MYSQL_HOST
            valueFrom:
              configMapKeyRef:
                name: sage-auth-config
                key: MYSQL_HOST
      containers:
      - image: waggle/sage-auth:latest
        name: sage-auth
        command:
          - ash
          - -c
          - python3 manage.py migrate ;
           python3 manage.py collectstatic --no-input ;
           python3 manage.py runserver 0.0.0.0:8000
        env:
        - name: DEBUG_VALUE
          value: "FALSE"
        - name: Globus_Auth_Client_ID
          valueFrom:
            secretKeyRef:
                name: sage-auth
                key: Globus_Auth_Client_ID
        - name: Globus_Auth_Client_Secret
          valueFrom:
            secretKeyRef:
                name: sage-auth
                key: Globus_Auth_Client_Secret
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: sage-auth-config
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sage-auth
              key: MYSQL_PASSWORD
        #- name: MYSQL_ROOT_PASSWORD
        #  valueFrom:
        #    secretKeyRef:
        #      name: sage-auth-mysql-env
        #      key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: sage-auth-config
              key: MYSQL_DATABASE
        - name: MYSQL_HOST
          valueFrom:
            configMapKeyRef:
              name: sage-auth-config
              key: MYSQL_HOST
        - name: SAGE_COOKIE_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: sage-auth-config
              key: SAGE_COOKIE_DOMAIN
        ports:
        - containerPort: 8000
        volumeMounts:
          - name: static-files
            mountPath: /usr/src/app/webapp/webapp/static_root
      - image: nginx:1.20-alpine
        name: sage-auth-static
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
          - name: static-files
            mountPath: /usr/share/nginx/html/static/
            readOnly: true
      restartPolicy: Always
      volumes:
      - name: static-files
        emptyDir: {}
